{"ast":null,"code":"import axios from \"axios\";\nimport { API_BASE_URL } from \"../../config/apiConfig\";\nimport { GET_USER_FAILURE, GET_USER_REQUEST, GET_USER_SUCCESS, LOGIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGOUT, REGISTER_FAILURE, REGISTER_REQUEST, REGISTER_SUCCESS } from \"./ActionType\";\nconst token = localStorage.getItem(\"jwt\");\nconst registerRequest = () => ({\n  type: REGISTER_REQUEST\n});\nconst registerSuccess = user => ({\n  type: REGISTER_SUCCESS,\n  payload: user\n});\nconst registerFailure = error => ({\n  type: REGISTER_FAILURE,\n  payload: error\n});\nexport const register = userData => async dispatch => {\n  dispatch(registerRequest());\n  try {\n    const response = await axios.post(`${API_BASE_URL}/auth/signup`, userData);\n    const user = response.data;\n    if (user.jwt) {\n      localStorage.setItem(\"jwt\", user.jwt);\n    }\n    dispatch(registerSuccess(user.jwt));\n  } catch (error) {\n    dispatch(registerFailure(error.message));\n  }\n};\nconst loginRequest = () => ({\n  type: LOGIN_REQUEST\n});\nconst loginSuccess = user => ({\n  type: LOGIN_SUCCESS,\n  payload: user\n});\nconst loginFailure = error => ({\n  type: LOGIN_FAILURE,\n  payload: error\n});\nexport const login = userData => async dispatch => {\n  dispatch(loginRequest());\n  try {\n    const response = await axios.post(`${API_BASE_URL}/auth/signin`, userData);\n    const user = response.data;\n    if (user.jwt) {\n      localStorage.setItem(\"jwt\", user.jwt);\n    }\n    dispatch(loginSuccess(user.jwt));\n  } catch (error) {\n    dispatch(loginFailure(error.message));\n  }\n};\nconst getUserRequest = () => ({\n  type: GET_USER_REQUEST\n});\nconst getUserSuccess = user => ({\n  type: GET_USER_SUCCESS,\n  payload: user\n});\nconst getUserFailure = error => ({\n  type: GET_USER_FAILURE,\n  payload: error\n});\nexport const getUser = () => async dispatch => {\n  dispatch(getUserRequest());\n  try {\n    const response = await axios.get(`${API_BASE_URL}/api/users/profile`, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    const user = response.data;\n    dispatch(getUserSuccess(user));\n  } catch (error) {\n    dispatch(getUserFailure(error.message));\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT,\n    payload: null\n  });\n};","map":{"version":3,"names":["axios","API_BASE_URL","GET_USER_FAILURE","GET_USER_REQUEST","GET_USER_SUCCESS","LOGIN_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGOUT","REGISTER_FAILURE","REGISTER_REQUEST","REGISTER_SUCCESS","token","localStorage","getItem","registerRequest","type","registerSuccess","user","payload","registerFailure","error","register","userData","dispatch","response","post","data","jwt","setItem","message","loginRequest","loginSuccess","loginFailure","login","getUserRequest","getUserSuccess","getUserFailure","getUser","get","headers","logout"],"sources":["D:/LapTrinhWeb/LapTrinhWeb/ChuyenDeWeb/Project_CDWeb/VScode/src/State/Auth/Action.js"],"sourcesContent":["import axios from \"axios\"\r\nimport { API_BASE_URL } from \"../../config/apiConfig\"\r\nimport { GET_USER_FAILURE, GET_USER_REQUEST, GET_USER_SUCCESS, LOGIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGOUT, REGISTER_FAILURE, REGISTER_REQUEST, REGISTER_SUCCESS } from \"./ActionType\"\r\n\r\nconst token = localStorage.getItem(\"jwt\");\r\nconst registerRequest = () => ({ type: REGISTER_REQUEST });\r\nconst registerSuccess = (user) => ({ type: REGISTER_SUCCESS, payload: user });\r\nconst registerFailure = (error) => ({ type: REGISTER_FAILURE, payload: error });\r\n\r\nexport const register = (userData) => async (dispatch) => {\r\n    dispatch(registerRequest())\r\n    try {\r\n        const response = await axios.post(`${API_BASE_URL}/auth/signup`, userData)\r\n        const user = response.data;\r\n        if (user.jwt) {\r\n            localStorage.setItem(\"jwt\", user.jwt)\r\n        }\r\n        dispatch(registerSuccess(user.jwt))\r\n    } catch (error) {\r\n        dispatch(registerFailure(error.message))\r\n    }\r\n\r\n}\r\n\r\nconst loginRequest = () => ({ type: LOGIN_REQUEST });\r\nconst loginSuccess = (user) => ({ type: LOGIN_SUCCESS, payload: user });\r\nconst loginFailure = (error) => ({ type: LOGIN_FAILURE, payload: error });\r\n\r\nexport const login = (userData) => async (dispatch) => {\r\n    dispatch(loginRequest())\r\n    try {\r\n        const response = await axios.post(`${API_BASE_URL}/auth/signin`, userData)\r\n        const user = response.data;\r\n        if (user.jwt) {\r\n            localStorage.setItem(\"jwt\", user.jwt)\r\n        }\r\n        dispatch(loginSuccess(user.jwt))\r\n    } catch (error) {\r\n        dispatch(loginFailure(error.message))\r\n    }\r\n\r\n}\r\n\r\nconst getUserRequest = () => ({ type: GET_USER_REQUEST });\r\nconst getUserSuccess = (user) => ({ type: GET_USER_SUCCESS, payload: user });\r\nconst getUserFailure = (error) => ({ type: GET_USER_FAILURE, payload: error });\r\n\r\nexport const getUser = () => async (dispatch) => {\r\n    dispatch(getUserRequest())\r\n    try {\r\n        const response = await axios.get(`${API_BASE_URL}/api/users/profile`, {\r\n            headers: {\r\n                \"Authorization\": `Bearer ${token}`\r\n            }\r\n        })\r\n        const user = response.data;\r\n        dispatch(getUserSuccess(user))\r\n    } catch (error) {\r\n        dispatch(getUserFailure(error.message))\r\n    }\r\n\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n    dispatch({ type: LOGOUT, payload: null })\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}